/**
 * TinyMCE Plugin for New Window Preview
 */
!function () {
    "use strict";
    var pluginManager = tinymce.util.Tools.resolve("tinymce.PluginManager");

    function handleChange() {
        const editor = tinymce.get('editor');
        const textContent = localStorage.editorMode === 'default' ? editor.getContent() : marked.parse(editor.getContent({ format: 'text' }));
        console.log(textContent);
        localStorage.setItem("previewHTML", textContent);
    }
    const toggleNewWindowPreview = (editor, stateContainer) => {
        stateContainer.set(!stateContainer.get());
        if (stateContainer.get()) {
            localStorage.openNewPreview = "true"
            localStorage.previewUpdate = "true"
            editor.on('input', handleChange);
        } else {
            localStorage.openNewPreview = "false"
            localStorage.previewUpdate = "false"
            editor.off('input', handleChange);
        }
    };

    const setupToggleButton = (editor, stateContainer) => stateToggle => {
        stateToggle.setActive(stateContainer.get());
    };

    pluginManager.add("newwindowpreview", (editor) => {
        const stateContainer = (() => {
            let state = localStorage.openNewPreview === "true";
            if (state) {
                editor.on('input', handleChange);
            } else {
                editor.off('input', handleChange);
            }

            return {
                get: () => state,
                set: newState => { state = newState; }
            };
        })();
        editor.addCommand("mceNewWindowPreview", () => {
            toggleNewWindowPreview(editor, stateContainer);
        });
        editor.ui.registry.addToggleMenuItem("newwindowpreview", {
            text: "新窗口预览",
            onAction: () => editor.execCommand("mceNewWindowPreview"),
            onSetup: setupToggleButton(editor, stateContainer)
        });

    });
}();
