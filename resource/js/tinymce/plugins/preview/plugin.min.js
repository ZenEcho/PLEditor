/**
 * TinyMCE version 6.7.2 (2023-10-25)
 */

(function () {
    "use strict";
    const pluginManager = tinymce.util.Tools.resolve("tinymce.PluginManager"),
        env = tinymce.util.Tools.resolve("tinymce.Env"),
        util = tinymce.util.Tools.resolve("tinymce.util.Tools");

    const getOption = (optionName) => (editor) => editor.options.get(optionName),
        getContentStyle = getOption("content_style"),
        isContentCssCorsEnabled = getOption("content_css_cors"),
        getBodyClass = getOption("body_class"),
        getBodyId = getOption("body_id");

    pluginManager.add("preview", (editor) => {
        (editorInstance => {
            editorInstance.addCommand("mcePreview", () => {
                (editor => {
                    if (localStorage.openNewPreview === "true") {
                        const textContent = localStorage.editorMode === 'default' ? editor.getContent() : editor.getContent({ format: 'text' });
                        window.open('preview.html', 'newWindow', 'width=900,height=650');
                        localStorage.setItem('previewHTML', marked.parse(textContent))
                        return;
                    }
                    const generatePreviewHTML = (editor => {
                        let previewHTML = "";
                        const encodeHTML = editor.dom.encode,
                            defaultContentStyle = getContentStyle(editor) || "";

                        previewHTML += '<base href="' + encodeHTML(editor.documentBaseURI.getURI()) + '">';
                        const cssCorsAttribute = isContentCssCorsEnabled(editor) ? ' crossorigin="anonymous"' : "";

                        util.each(editor.contentCSS, (cssUrl) => {
                            previewHTML += '<link type="text/css" rel="stylesheet" href="' + encodeHTML(editor.documentBaseURI.toAbsolute(cssUrl)) + '"' + cssCorsAttribute + ">";
                        });

                        if (defaultContentStyle) {
                            previewHTML += '<style type="text/css">' + defaultContentStyle + "</style>";
                        }
                        const bodyId = getBodyId(editor),
                            bodyClass = getBodyClass(editor),
                            clickHandlerScript = '<script>document.addEventListener && document.addEventListener("click", function(e) {for (var elm = e.target; elm; elm = elm.parentNode) {if (elm.nodeName === "A" && !(' + (env.os.isMacOS() || env.os.isiOS() ? "e.metaKey" : "e.ctrlKey && !e.altKey") + ')) {e.preventDefault();}}}, false);<\/script> ',
                            previewcss = `<link rel="stylesheet" href="resource/css/preview.css">`,
                            bodyDirAttribute = editor.getBody().dir,
                            bodyDir = bodyDirAttribute ? ' dir="' + encodeHTML(bodyDirAttribute) + '"' : "";

                        const textContent = localStorage.editorMode === 'default' ? editor.getContent() : marked.parse(editor.getContent({ format: 'text' }));
                        return "<!DOCTYPE html><html><head>" + previewHTML + previewcss + '</head><body id="' + encodeHTML(bodyId) + '" class="mce-content-body ' + encodeHTML(bodyClass) + '"' + bodyDir + ">" + textContent + clickHandlerScript + "</body></html>";
                    })(editor);

                    editor.windowManager.open({
                        title: "Preview",
                        size: "large",
                        body: {
                            type: "panel",
                            items: [{ name: "preview", type: "iframe", sandboxed: !0, transparent: !1 }],
                        },
                        buttons: [{ type: "cancel", name: "close", text: "Close", primary: !0 }],
                        initialData: { preview: generatePreviewHTML },
                    }).focus("close");
                })(editor);
            });
        })(editor);

        (editor => {
            const executePreviewCommand = () => editor.execCommand("mcePreview");
            editor.ui.registry.addButton("preview", { icon: "preview", tooltip: "Preview", onAction: executePreviewCommand });
            editor.ui.registry.addMenuItem("preview", { icon: "preview", text: "Preview", onAction: executePreviewCommand });
        })(editor);
    });
})();
