/**
 * TinyMCE version 6.7.2 (2023-10-25)
 * VisualBlocks Plugin Initialization
 */
!function () {
    "use strict"; // 使用严格模式
    // 解析并获取TinyMCE的PluginManager
    let pluginManager = tinymce.util.Tools.resolve("tinymce.PluginManager");

    // 切换视觉块显示的函数
    const toggleVisualBlocks = (editor, _unused, stateContainer) => {
        // 在编辑器的body中切换'visualblocks'的class，来显示或隐藏块元素
        editor.dom.toggleClass(editor.getBody(), "mce-visualblocks");
        // 切换存储块显示状态的容器值
        stateContainer.set(!stateContainer.get());
        // 触发'VisualBlocks'事件，更新UI按钮的状态
        editor.dispatch("VisualBlocks", { state: stateContainer.get() });
    };

    // 获取默认的视觉块状态（是否显示）
    const getDefaultState = ("visualblocks_default_state", editor => editor.options.get("visualblocks_default_state"));

    // 设置视觉块切换按钮的函数
    const setupToggleButton = (editor, stateContainer) => stateToggle => {
        // 设置切换按钮的激活状态
        stateToggle.setActive(stateContainer.get());
        // 当'VisualBlocks'事件发生时，更新切换按钮的激活状态
        const updateToggleButtonState = event => stateToggle.setActive(event.state);
        // 监听'VisualBlocks'事件
        editor.on("VisualBlocks", updateToggleButtonState);
        // 返回一个函数用于取消监听
        return () => editor.off("VisualBlocks", updateToggleButtonState);
    };

    // 注册'visualblocks'插件
    pluginManager.add("visualblocks", (editor) => {
        // 注册'visualblocks_default_state'选项
        editor.options.register("visualblocks_default_state", { processor: "boolean", default: false });

        // 状态容器，用于存储视觉块的显示状态
        const stateContainer = (() => {
            let state = false;
            return {
                get: () => state,
                set: newState => { state = newState; }
            };
        })();

        // 添加'visualblocks'命令到编辑器
        editor.addCommand("mceVisualBlocks", () => {
            toggleVisualBlocks(editor, 0, stateContainer);
        });

        // 在UI中添加一个切换按钮和菜单项
        editor.ui.registry.addToggleButton("visualblocks", {
            icon: "visualblocks",
            tooltip: "Show blocks",
            onAction: () => editor.execCommand("mceVisualBlocks"),
            onSetup: setupToggleButton(editor, stateContainer)
        });
        editor.ui.registry.addToggleMenuItem("visualblocks", {
            text: "Show blocks",
            icon: "visualblocks",
            onAction: () => editor.execCommand("mceVisualBlocks"),
            onSetup: setupToggleButton(editor, stateContainer)
        });

        // 监听格式预览事件和初始化事件，以便在适当的时候切换视觉块的显示状态
        editor.on("PreviewFormats AfterPreviewFormats", (event => {
            stateContainer.get() && editor.dom.toggleClass(editor.getBody(), "mce-visualblocks", "afterpreviewformats" === event.type);
        }));
        editor.on("init", () => {
            getDefaultState(editor) && toggleVisualBlocks(editor, 0, stateContainer);
        });
    });
}();
